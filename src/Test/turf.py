'''
THIS FILE IS NOT NEEDED!!!!!!!!!!!!!!!!!!


'''
import base64
'''
name = "sudhan is a name"
name_bytes = name.encode("ascii")    #convert to byte like objects


base64_bytes = base64.b64encode(name_bytes)
# print(base64_bytes)    # OP : b'c3VkaGFuIGlzIGEgbmFtZQ=='
base64_string = base64_bytes.decode("ascii")
print(base64_string)     # OP : c3VkaGFuIGlzIGEgbmFtZQ==


sample_string_bytes = base64.b64decode(base64_bytes)
print(sample_string_bytes)    # b'sudhan is a name' return bytes of type string

sample_string = sample_string_bytes.decode("ascii")     # normal string from bytes
print(sample_string)

'''


# attr = ''''''
# attr = '/' + attr
# decoded_data = base64.b64decode((attr))

# img_file = open('image.jpeg',"wb")
# img_file.write(decoded_data)
# img_file.close()


from selenium import webdriver
# from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup as BSoup
from lxml import etree



def get_embedded_Map_link(map_url):
    opts = webdriver.ChromeOptions()
    # opts.add_argument("user-agent")
    # opts.add_argument("--headless")       
    opts.add_argument("log-level=3")
    # opts.add_argument(f'user-agent = {random.choice(User_Agent_list)}')
    driver = webdriver.Chrome(r'C:\Users\DELL\Desktop\Exif_Site upgraded with html css front end checkpoint-6\src\chromedriver.exe',chrome_options=opts)
    driver.get(map_url)
    driver.implicitly_wait(1)
    # click on 
    share_button = driver.find_element(By.XPATH,'''//*[@id="QA0Szd"]/div/div/div[1]/div[2]/div/div[1]/div/div/div[4]/div[5]/button''')
    share_button.click()


    # SELECT EMBEDDED MAP IN THE SHARE POP UP WINDOW.
    embedded_link_button = driver.find_element(By.XPATH,'''//*[@id="modal-dialog"]/div/div[2]/div/div[3]/div/div/div[1]/div[2]/button[2]''')
    embedded_link_button.click()

    # time.sleep(1)

    get_iframe = driver.find_element(By.XPATH,'''//*[@id="modal-dialog"]/div/div[2]/div/div[3]/div/div/div/div[3]/div[1]/input''') #this is by extracting link from text box itself
    iframe_link_default = get_iframe.get_attribute("value")
    iframe_link = iframe_link_default.split('"')[1]
    
    driver.close()
    print(f" Google maps api called ".center(100,"^"))
    return iframe_link


if __name__ == "__main__":
    var = get_embedded_Map_link("https://www.google.com/maps?q=13.964558972222221,75.57911697222222")
    print(var)